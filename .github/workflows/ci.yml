name: Comprehensive CI Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_scope:
        description: 'Test scope'
        required: false
        default: 'standard'
        type: choice
        options:
          - 'fast'        # Quick feedback tests
          - 'standard'    # Full test suite
          - 'comprehensive' # All tests + performance

env:
  RUBY_VERSION: '3.2'

defaults:
  run:
    shell: bash

jobs:
  # Fast feedback job for quick validation
  fast-checks:
    name: Fast Checks
    runs-on: ubuntu-latest
    timeout-minutes: 5

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          install-system-deps: false

      - name: Quick Syntax Check
        run: ruby -c lib/jekyll-theme-zer0/version.rb

      - name: Validate Gemspec
        run: gem specification jekyll-theme-zer0.gemspec > /dev/null

  # Comprehensive testing across Ruby versions
  test:
    name: Test Suite (Ruby ${{ matrix.ruby }})
    runs-on: ubuntu-latest
    needs: fast-checks
    timeout-minutes: 15
    strategy:
      fail-fast: false
      matrix:
        ruby: ['2.7', '3.0', '3.2']
        include:
          - ruby: '3.0'
            coverage: true

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Test Suite
        uses: ./.github/actions/test-suite
        with:
          ruby-version: ${{ matrix.ruby }}
          verbose: true

      - name: Upload Test Results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-ruby-${{ matrix.ruby }}
          path: test/results/
          retention-days: 7

      - name: Upload Coverage Report
        uses: actions/upload-artifact@v4
        if: matrix.coverage
        with:
          name: coverage-ruby-${{ matrix.ruby }}
          path: test/coverage/
          retention-days: 7

  # Security and code quality checks
  security:
    name: Security & Code Quality
    runs-on: ubuntu-latest
    needs: fast-checks
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          install-system-deps: true

      - name: Run Security Audit
        run: |
          echo "## 🔒 Security Audit Results" >> $GITHUB_STEP_SUMMARY
          if bundle audit check --update || bundle audit check; then
            echo "✅ **Security:** No vulnerabilities detected" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Security:** Potential vulnerabilities found" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Run RuboCop (if configured)
        run: |
          echo "## 🎨 Code Style Results" >> $GITHUB_STEP_SUMMARY
          if [ -f .rubocop.yml ]; then
            if rubocop --format github; then
              echo "✅ **RuboCop:** All files pass style checks" >> $GITHUB_STEP_SUMMARY
            else
              echo "❌ **RuboCop:** Style issues found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "ℹ️ **RuboCop:** No configuration found, skipping..." >> $GITHUB_STEP_SUMMARY
          fi

      - name: Validate File Permissions
        run: |
          echo "## 📁 File Permission Check" >> $GITHUB_STEP_SUMMARY
          executable_rb=$(find . -name "*.rb" -executable -type f 2>/dev/null | head -5)
          executable_md=$(find . -name "*.md" -executable -type f 2>/dev/null | head -5)
          
          if [[ -z "$executable_rb" && -z "$executable_md" ]]; then
            echo "✅ **Permissions:** No issues found" >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Permissions:** Some files have incorrect executable permissions" >> $GITHUB_STEP_SUMMARY
            [[ -n "$executable_rb" ]] && echo "- Ruby files: $executable_rb" >> $GITHUB_STEP_SUMMARY
            [[ -n "$executable_md" ]] && echo "- Markdown files: $executable_md" >> $GITHUB_STEP_SUMMARY
          fi

  # Build validation
  build:
    name: Build & Validate
    runs-on: ubuntu-latest
    needs: [test, security]
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          install-system-deps: true

      - name: Build Gem
        run: |
          chmod +x ./scripts/build.sh
          ./scripts/build.sh

      - name: Validate Built Gem
        run: |
          VERSION=$(jq -r '.version' package.json 2>/dev/null || echo "unknown")
          GEM_FILE="build/jekyll-theme-zer0-$VERSION.gem"

          if [ -f "$GEM_FILE" ]; then
            echo "✅ **Build:** Gem built successfully: $GEM_FILE" >> $GITHUB_STEP_SUMMARY
            echo "📦 **Files in gem:** $(gem specification "$GEM_FILE" | grep -c "files:" || echo "unknown")" >> $GITHUB_STEP_SUMMARY
            
            # Test gem installation
            gem install "$GEM_FILE" --local --no-document
            echo "✅ **Install:** Gem installs successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Build:** Gem file not found: $GEM_FILE" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Upload Built Gem
        uses: actions/upload-artifact@v4
        with:
          name: jekyll-theme-zer0-gem
          path: build/*.gem
          retention-days: 30

  # Integration testing with Docker (only on main branch or comprehensive tests)
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build
    if: |
      github.ref == 'refs/heads/main' || 
      inputs.test_scope == 'comprehensive' ||
      github.event_name == 'pull_request'
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Start Jekyll in Docker
        run: |
          echo "## 🐳 Docker Integration Test" >> $GITHUB_STEP_SUMMARY
          if docker-compose up -d; then
            echo "✅ **Docker:** Container started successfully" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Docker:** Failed to start container" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Wait for Jekyll to Start
        run: |
          timeout 60 bash -c 'until curl -s http://localhost:4000 > /dev/null; do sleep 2; done' || true

      - name: Test Site Accessibility
        run: |
          if curl -f http://localhost:4000 > /dev/null 2>&1; then
            echo "✅ **Site:** Jekyll site is accessible at localhost:4000" >> $GITHUB_STEP_SUMMARY
            
            # Test basic pages
            if curl -f http://localhost:4000/about/ > /dev/null 2>&1; then
              echo "✅ **Routes:** Theme routes working correctly" >> $GITHUB_STEP_SUMMARY
            else
              echo "⚠️ **Routes:** Some theme routes may not be working" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "❌ **Site:** Jekyll site is not accessible" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

      - name: Cleanup Docker
        if: always()
        run: docker-compose down || true

  # Final status report
  summary:
    name: CI Pipeline Summary
    runs-on: ubuntu-latest
    needs: [fast-checks, test, security, build, integration]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Generate CI Summary
        run: |
          echo "## 🏗️ CI Pipeline Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Test Scope:** ${{ inputs.test_scope || 'standard' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Component | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Fast Checks | ${{ needs.fast-checks.result }} | Syntax and basic validation |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Tests | ${{ needs.test.result }} | Multi-Ruby version testing |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔒 Security | ${{ needs.security.result }} | Vulnerability & code quality |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔨 Build | ${{ needs.build.result }} | Gem build and validation |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔗 Integration | ${{ needs.integration.result }} | Docker and site testing |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Check if all required jobs passed
          REQUIRED_JOBS=("fast-checks" "test" "security" "build")
          ALL_PASSED=true
          
          for job in "${REQUIRED_JOBS[@]}"; do
            case $job in
              "fast-checks") STATUS="${{ needs.fast-checks.result }}" ;;
              "test") STATUS="${{ needs.test.result }}" ;;
              "security") STATUS="${{ needs.security.result }}" ;;
              "build") STATUS="${{ needs.build.result }}" ;;
            esac
            
            if [[ "$STATUS" != "success" ]]; then
              ALL_PASSED=false
              break
            fi
          done

          if [[ "$ALL_PASSED" == "true" ]]; then
            echo "## ✅ **CI Pipeline: SUCCESS**" >> $GITHUB_STEP_SUMMARY
            echo "All critical checks passed! The code is ready for deployment." >> $GITHUB_STEP_SUMMARY
            
            if [[ "${{ needs.integration.result }}" == "failure" ]]; then
              echo "" >> $GITHUB_STEP_SUMMARY
              echo "⚠️ Note: Integration tests failed but this doesn't block the pipeline" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "## ❌ **CI Pipeline: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Some critical checks failed. Please review the results above." >> $GITHUB_STEP_SUMMARY
            
            # List failed jobs
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Failed Components:" >> $GITHUB_STEP_SUMMARY
            [[ "${{ needs.fast-checks.result }}" != "success" ]] && echo "- 🚀 Fast Checks" >> $GITHUB_STEP_SUMMARY
            [[ "${{ needs.test.result }}" != "success" ]] && echo "- 🧪 Tests" >> $GITHUB_STEP_SUMMARY
            [[ "${{ needs.security.result }}" != "success" ]] && echo "- 🔒 Security & Code Quality" >> $GITHUB_STEP_SUMMARY
            [[ "${{ needs.build.result }}" != "success" ]] && echo "- 🔨 Build & Validation" >> $GITHUB_STEP_SUMMARY
            [[ "${{ needs.integration.result }}" == "failure" ]] && echo "- 🔗 Integration (non-blocking)" >> $GITHUB_STEP_SUMMARY
            
            exit 1
          fi


