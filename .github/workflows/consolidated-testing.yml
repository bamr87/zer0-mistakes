name: Consolidated Testing Framework

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      test_suites:
        description: 'Test suites to run'
        required: false
        default: 'all'
        type: choice
        options:
          - 'all'
          - 'core'
          - 'deployment'
          - 'quality'
          - 'core,deployment'
          - 'core,quality'
      environment:
        description: 'Test environment'
        required: false
        default: 'ci'
        type: choice
        options:
          - 'local'
          - 'ci'
          - 'docker'

env:
  RUBY_VERSION: '3.0'
  NODE_VERSION: '18'
  TEST_RESULTS_PATH: 'test/results'
  REPORTS_PATH: 'test/reports'

jobs:
  # Fast core tests for quick feedback
  core-tests:
    name: Core Tests (Ruby ${{ matrix.ruby }})
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || contains(github.event.inputs.test_suites || 'all', 'core')
    strategy:
      matrix:
        ruby: ['2.7', '3.0', '3.2']
    timeout-minutes: 10
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ matrix.ruby }}
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Make scripts executable
        run: chmod +x test/*.sh

      - name: Run core tests
        run: |
          ./test/test_runner.sh \
            --suites core \
            --verbose \
            --format json \
            --environment ci \
            --timeout 300

      - name: Upload core test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: core-test-results-ruby-${{ matrix.ruby }}
          path: |
            ${{ env.TEST_RESULTS_PATH }}/
            ${{ env.REPORTS_PATH }}/
          retention-days: 7

  # Comprehensive deployment tests
  deployment-tests:
    name: Deployment Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || contains(github.event.inputs.test_suites || 'all', 'deployment')
    needs: core-tests
    timeout-minutes: 20
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Make scripts executable
        run: chmod +x test/*.sh

      - name: Run deployment tests
        run: |
          ./test/test_runner.sh \
            --suites deployment \
            --verbose \
            --format json \
            --environment ci \
            --skip-docker \
            --timeout 600

      - name: Upload deployment test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: deployment-test-results
          path: |
            ${{ env.TEST_RESULTS_PATH }}/
            ${{ env.REPORTS_PATH }}/
          retention-days: 7

  # Quality assurance tests
  quality-tests:
    name: Quality Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || contains(github.event.inputs.test_suites || 'all', 'quality')
    needs: core-tests
    timeout-minutes: 15
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install security tools
        run: |
          gem install bundler-audit brakeman

      - name: Make scripts executable
        run: chmod +x test/*.sh

      - name: Run quality tests
        run: |
          ./test/test_runner.sh \
            --suites quality \
            --verbose \
            --format json \
            --environment ci \
            --timeout 600

      - name: Upload quality test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: quality-test-results
          path: |
            ${{ env.TEST_RESULTS_PATH }}/
            ${{ env.REPORTS_PATH }}/
          retention-days: 7

  # Docker integration tests (when Docker is available)
  docker-tests:
    name: Docker Integration Tests
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    needs: core-tests
    timeout-minutes: 25
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Make scripts executable
        run: chmod +x test/*.sh

      - name: Run deployment tests with Docker
        run: |
          ./test/test_runner.sh \
            --suites deployment \
            --verbose \
            --format json \
            --environment docker \
            --timeout 900

      - name: Upload Docker test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: docker-test-results
          path: |
            ${{ env.TEST_RESULTS_PATH }}/
            ${{ env.REPORTS_PATH }}/
          retention-days: 7

  # Comprehensive test suite (manual trigger or main branch)
  comprehensive-tests:
    name: Comprehensive Test Suite
    runs-on: ubuntu-latest
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.test_suites == 'all'
    timeout-minutes: 30
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          bundler-cache: true

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Install security tools
        run: |
          gem install bundler-audit brakeman

      - name: Make scripts executable
        run: chmod +x test/*.sh

      - name: Run comprehensive test suite
        run: |
          ./test/test_runner.sh \
            --suites all \
            --verbose \
            --format json \
            --environment ${{ github.event.inputs.environment || 'ci' }} \
            --parallel \
            --timeout 1200

      - name: Upload comprehensive test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: comprehensive-test-results
          path: |
            ${{ env.TEST_RESULTS_PATH }}/
            ${{ env.REPORTS_PATH }}/
          retention-days: 30

  # Test result aggregation and reporting
  test-report:
    name: Test Results & Report
    runs-on: ubuntu-latest
    needs: [core-tests, deployment-tests, quality-tests]
    if: always()
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all test artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts/

      - name: Install analysis tools
        run: |
          sudo apt-get update
          sudo apt-get install -y jq

      - name: Aggregate test results
        run: |
          mkdir -p consolidated-results
          
          # Find all test result JSON files
          find artifacts/ -name "*.json" -type f | while read -r file; do
            echo "Processing: $file"
            # Copy with descriptive names
            cp "$file" "consolidated-results/$(basename "$(dirname "$file")")-$(basename "$file")"
          done
          
          # Create consolidated summary
          echo '{"consolidated_results": {}}' > consolidated-results/master-report.json
          
          # Count results
          TOTAL_FILES=$(find consolidated-results/ -name "*.json" | wc -l)
          echo "Processed $TOTAL_FILES test result files"

      - name: Generate test summary
        run: |
          echo "## 🧪 Consolidated Test Results Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Timestamp:** $(date -u)" >> $GITHUB_STEP_SUMMARY
          echo "**Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Analyze results if available
          if [[ -d "artifacts/" ]]; then
            echo "### Test Suite Results" >> $GITHUB_STEP_SUMMARY
            echo "| Suite | Status | Artifacts |" >> $GITHUB_STEP_SUMMARY
            echo "|-------|--------|-----------|" >> $GITHUB_STEP_SUMMARY
            
            # Check each job's results
            for job in core-tests deployment-tests quality-tests docker-tests; do
              if [[ -d "artifacts/${job}-results" ]] || find artifacts/ -name "*${job}*" -type d | head -1 | grep -q .; then
                echo "| ${job} | ✅ Completed | Available |" >> $GITHUB_STEP_SUMMARY
              else
                echo "| ${job} | ⚠️ Not Run | N/A |" >> $GITHUB_STEP_SUMMARY
              fi
            done
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "📊 [View detailed results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

      - name: Upload consolidated results
        uses: actions/upload-artifact@v4
        with:
          name: consolidated-test-results
          path: consolidated-results/
          retention-days: 30

  # Status check for required tests
  test-status:
    name: Test Status Check
    runs-on: ubuntu-latest
    needs: [core-tests, deployment-tests, quality-tests]
    if: always()
    
    steps:
      - name: Evaluate test results
        run: |
          echo "## 🎯 Test Status Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Check core tests (required)
          if [[ "${{ needs.core-tests.result }}" == "success" ]]; then
            echo "✅ **Core Tests**: Passed (Required)" >> $GITHUB_STEP_SUMMARY
            CORE_PASSED=true
          else
            echo "❌ **Core Tests**: Failed (Required)" >> $GITHUB_STEP_SUMMARY
            CORE_PASSED=false
          fi
          
          # Check deployment tests
          if [[ "${{ needs.deployment-tests.result }}" == "success" ]]; then
            echo "✅ **Deployment Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.deployment-tests.result }}" == "skipped" ]]; then
            echo "⚠️ **Deployment Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Deployment Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          # Check quality tests
          if [[ "${{ needs.quality-tests.result }}" == "success" ]]; then
            echo "✅ **Quality Tests**: Passed" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ needs.quality-tests.result }}" == "skipped" ]]; then
            echo "⚠️ **Quality Tests**: Skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Quality Tests**: Failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          
          # Overall status
          if [[ "$CORE_PASSED" == "true" ]]; then
            echo "🎉 **Overall Status**: Core requirements met!" >> $GITHUB_STEP_SUMMARY
            echo "The consolidated test framework is working correctly." >> $GITHUB_STEP_SUMMARY
          else
            echo "💥 **Overall Status**: Core tests failed!" >> $GITHUB_STEP_SUMMARY
            echo "Please review and fix core test failures before proceeding." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
