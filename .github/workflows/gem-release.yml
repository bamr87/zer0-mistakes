name: Release Gem to RubyGems

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      publish:
        description: 'Publish to RubyGems'
        required: false
        default: false
        type: boolean
      dry_run:
        description: 'Dry run (build but do not publish)'
        required: false
        default: false
        type: boolean

env:
  RUBY_VERSION: '3.2'

defaults:
  run:
    shell: bash

jobs:
  # Pre-release validation with enhanced checks
  validate:
    name: Pre-release Validation
    runs-on: ubuntu-latest
    timeout-minutes: 15
    outputs:
      should_publish: ${{ steps.check_publish.outputs.should_publish }}
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Extract Version Information
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            TAG="${{ github.ref_name }}"
            VERSION="${TAG#v}"
          else
            # For workflow_dispatch, use current version from code
            VERSION=$(ruby -e "require './lib/jekyll-theme-zer0/version'; puts JekyllThemeZer0::VERSION" 2>/dev/null || echo "unknown")
            TAG="v$VERSION"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT  
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          
          echo "## 📦 Release Information" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** $VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** $TAG" >> $GITHUB_STEP_SUMMARY

      - name: Check if Should Publish
        id: check_publish
        run: |
          SHOULD_PUBLISH=false
          
          if [[ "${{ github.event_name }}" == "push" && "${{ github.ref }}" =~ ^refs/tags/v ]]; then
            SHOULD_PUBLISH=true
            echo "- **Trigger:** Tag push (auto-publish)" >> $GITHUB_STEP_SUMMARY
          elif [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ inputs.publish }}" == "true" ]]; then
            SHOULD_PUBLISH=true
            echo "- **Trigger:** Manual dispatch (publish requested)" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Trigger:** Manual dispatch (build only)" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "should_publish=$SHOULD_PUBLISH" >> $GITHUB_OUTPUT

      - name: Run Pre-release Tests
        uses: ./.github/actions/test-suite
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          verbose: true

      - name: Validate Version Consistency
        run: |
          CODE_VERSION=$(ruby -e "require './lib/jekyll-theme-zer0/version'; puts JekyllThemeZer0::VERSION")
          TAG_VERSION="${{ steps.version.outputs.version }}"
          
          echo "## 🔍 Version Validation" >> $GITHUB_STEP_SUMMARY
          echo "- **Code Version:** $CODE_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag Version:** $TAG_VERSION" >> $GITHUB_STEP_SUMMARY
          
          if [[ "$CODE_VERSION" != "$TAG_VERSION" ]] && [[ "$TAG_VERSION" != "unknown" ]]; then
            echo "❌ **Validation:** Version mismatch detected!" >> $GITHUB_STEP_SUMMARY
            echo "Code version ($CODE_VERSION) does not match tag version ($TAG_VERSION)"
            exit 1
          else
            echo "✅ **Validation:** Version consistency verified" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for Existing Release
        if: steps.check_publish.outputs.should_publish == 'true'
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          
          echo "## 📋 Release Validation" >> $GITHUB_STEP_SUMMARY
          
          # Check if this version already exists on RubyGems
          if gem list --remote jekyll-theme-zer0 | grep -q "jekyll-theme-zer0 ($VERSION)"; then
            echo "❌ **RubyGems:** Version $VERSION already exists" >> $GITHUB_STEP_SUMMARY
            echo "Cannot republish existing version. Please bump version first."
            exit 1
          else
            echo "✅ **RubyGems:** Version $VERSION is available for publishing" >> $GITHUB_STEP_SUMMARY
          fi

  # Build and prepare release assets  
  build:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: validate
    timeout-minutes: 10
    outputs:
      gem_file: ${{ steps.build_info.outputs.gem_file }}
      gem_size: ${{ steps.build_info.outputs.gem_size }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          install-system-deps: true

      - name: Build Gem
        run: |
          echo "## 🔨 Building Release Assets" >> $GITHUB_STEP_SUMMARY
          chmod +x ./scripts/build.sh
          
          if [[ "${{ inputs.dry_run }}" == "true" ]]; then
            ./scripts/build.sh --dry-run
            echo "🔍 **Mode:** Dry run (no actual build)" >> $GITHUB_STEP_SUMMARY
          else
            ./scripts/build.sh
            echo "✅ **Build:** Gem built successfully" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Extract Build Information
        id: build_info
        run: |
          VERSION="${{ needs.validate.outputs.version }}"
          GEM_FILE="jekyll-theme-zer0-$VERSION.gem"
          
          echo "gem_file=$GEM_FILE" >> $GITHUB_OUTPUT
          
          if [[ -f "build/$GEM_FILE" ]] && [[ "${{ inputs.dry_run }}" != "true" ]]; then
            GEM_SIZE=$(du -h "build/$GEM_FILE" | cut -f1)
            echo "gem_size=$GEM_SIZE" >> $GITHUB_OUTPUT
            
            echo "## 📊 Build Statistics" >> $GITHUB_STEP_SUMMARY
            echo "- **Gem File:** $GEM_FILE" >> $GITHUB_STEP_SUMMARY
            echo "- **File Size:** $GEM_SIZE" >> $GITHUB_STEP_SUMMARY
            
            # Test gem installation
            gem install "build/$GEM_FILE" --local --no-document
            echo "- **Installation:** Test successful" >> $GITHUB_STEP_SUMMARY
          else
            echo "gem_size=unknown" >> $GITHUB_OUTPUT
            echo "ℹ️ **Build:** Dry run mode - no files generated" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Upload Gem Artifact
        if: inputs.dry_run != 'true'
        uses: actions/upload-artifact@v4
        with:
          name: gem-${{ needs.validate.outputs.tag }}
          path: build/*.gem
          retention-days: 90  # Longer retention for releases

  # Publish to RubyGems
  publish:
    name: Publish to RubyGems
    runs-on: ubuntu-latest
    needs: [validate, build]
    if: needs.validate.outputs.should_publish == 'true' && inputs.dry_run != 'true'
    environment: production
    timeout-minutes: 10

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          install-system-deps: false

      - name: Download Gem Artifact
        uses: actions/download-artifact@v4
        with:
          name: gem-${{ needs.validate.outputs.tag }}
          path: ./release

      - name: Configure RubyGems Credentials
        run: |
          mkdir -p ~/.gem
          cat > ~/.gem/credentials << 'EOF'
          ---
          :rubygems_api_key: ${{ secrets.RUBYGEMS_API_KEY }}
          EOF
          chmod 600 ~/.gem/credentials

      - name: Publish Gem
        run: |
          GEM_FILE="${{ needs.build.outputs.gem_file }}"
          
          echo "## 🚀 Publishing to RubyGems" >> $GITHUB_STEP_SUMMARY
          echo "- **Publishing:** $GEM_FILE" >> $GITHUB_STEP_SUMMARY
          
          if gem push "./release/$GEM_FILE"; then
            echo "✅ **Success:** Published to RubyGems" >> $GITHUB_STEP_SUMMARY
            echo "- **URL:** https://rubygems.org/gems/jekyll-theme-zer0" >> $GITHUB_STEP_SUMMARY
            echo "- **Size:** ${{ needs.build.outputs.gem_size }}" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ **Failed:** Could not publish to RubyGems" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi

  # Final summary and notification
  summary:
    name: Release Summary
    runs-on: ubuntu-latest
    needs: [validate, build, publish]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Generate Release Summary
        run: |
          echo "## 📦 Gem Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Tag:** ${{ needs.validate.outputs.tag }}" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Component | Status | Details |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|---------|" >> $GITHUB_STEP_SUMMARY
          echo "| 🔍 Validation | ${{ needs.validate.result }} | Pre-release checks |" >> $GITHUB_STEP_SUMMARY
          echo "| 🔨 Build | ${{ needs.build.result }} | Asset preparation |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Publish | ${{ needs.publish.result || 'skipped' }} | RubyGems publication |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          if [[ "${{ needs.validate.result }}" == "success" && "${{ needs.build.result }}" == "success" ]]; then
            if [[ "${{ needs.validate.outputs.should_publish }}" == "true" ]] && [[ "${{ inputs.dry_run }}" != "true" ]]; then
              if [[ "${{ needs.publish.result }}" == "success" ]]; then
                echo "## ✅ **Release: SUCCESS**" >> $GITHUB_STEP_SUMMARY
                echo "Gem has been successfully published to RubyGems!" >> $GITHUB_STEP_SUMMARY
                echo "" >> $GITHUB_STEP_SUMMARY
                echo "### 🔄 Next Steps:" >> $GITHUB_STEP_SUMMARY
                echo "- GitHub release will be created by the github-release.yml workflow" >> $GITHUB_STEP_SUMMARY
                echo "- Verify gem availability: https://rubygems.org/gems/jekyll-theme-zer0" >> $GITHUB_STEP_SUMMARY
              else
                echo "## ❌ **Release: FAILED**" >> $GITHUB_STEP_SUMMARY
                echo "Build succeeded but publication failed" >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
            else
              echo "## ✅ **Build: SUCCESS**" >> $GITHUB_STEP_SUMMARY
              if [[ "${{ inputs.dry_run }}" == "true" ]]; then
                echo "Dry run completed successfully - no publication performed" >> $GITHUB_STEP_SUMMARY
              else
                echo "Build completed successfully - publication skipped" >> $GITHUB_STEP_SUMMARY
              fi
            fi
          else
            echo "## ❌ **Release: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Pre-release validation or build failed" >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
