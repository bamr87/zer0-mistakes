name: Version Bump and Release

on:
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
        - patch      # Bug fixes (0.1.0 → 0.1.1)
        - minor      # New features (0.1.0 → 0.2.0)
        - major      # Breaking changes (0.1.0 → 1.0.0)
      create_pr:
        description: 'Create pull request instead of direct commit'
        required: false
        default: false
        type: boolean
      skip_tests:
        description: 'Skip pre-bump tests (not recommended)'
        required: false
        default: false
        type: boolean

env:
  RUBY_VERSION: '3.2'

defaults:
  run:
    shell: bash

jobs:
  # Validation and preparation
  prepare:
    name: Prepare Version Bump
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      current_version: ${{ steps.version_info.outputs.current_version }}
      new_version: ${{ steps.version_info.outputs.new_version }}
      should_create_pr: ${{ steps.strategy.outputs.should_create_pr }}
      branch_name: ${{ steps.strategy.outputs.branch_name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Version Information
        id: version_info
        run: |
          CURRENT_VERSION=$(grep -o 'VERSION = "[^"]*"' lib/jekyll-theme-zer0/version.rb | sed 's/VERSION = "\(.*\)"/\1/')
          
          # Calculate new version
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}
          
          case "${{ inputs.version_type }}" in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac
          
          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          
          echo "current_version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          
          echo "## 📋 Version Bump Plan" >> $GITHUB_STEP_SUMMARY
          echo "- **Type:** ${{ inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Current:** $CURRENT_VERSION" >> $GITHUB_STEP_SUMMARY
          echo "- **New:** $NEW_VERSION" >> $GITHUB_STEP_SUMMARY

      - name: Determine Strategy
        id: strategy
        run: |
          SHOULD_CREATE_PR="${{ inputs.create_pr }}"
          BRANCH_NAME="version-bump-v${{ steps.version_info.outputs.new_version }}"
          
          echo "should_create_pr=$SHOULD_CREATE_PR" >> $GITHUB_OUTPUT
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          
          if [[ "$SHOULD_CREATE_PR" == "true" ]]; then
            echo "- **Strategy:** Create pull request for review" >> $GITHUB_STEP_SUMMARY
            echo "- **Branch:** $BRANCH_NAME" >> $GITHUB_STEP_SUMMARY
          else
            echo "- **Strategy:** Direct commit to main branch" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Check for Existing Version
        run: |
          NEW_VERSION="${{ steps.version_info.outputs.new_version }}"
          
          # Check if tag already exists
          if git tag --list | grep -q "^v$NEW_VERSION$"; then
            echo "❌ **Error:** Tag v$NEW_VERSION already exists" >> $GITHUB_STEP_SUMMARY
            echo "Version tag v$NEW_VERSION already exists in repository"
            exit 1
          fi
          
          # Check if version exists on RubyGems
          if gem list --remote jekyll-theme-zer0 | grep -q "jekyll-theme-zer0 ($NEW_VERSION)"; then
            echo "❌ **Error:** Version $NEW_VERSION already exists on RubyGems" >> $GITHUB_STEP_SUMMARY
            echo "Version $NEW_VERSION is already published on RubyGems"
            exit 1
          fi
          
          echo "✅ **Validation:** Version $NEW_VERSION is available" >> $GITHUB_STEP_SUMMARY

  # Pre-bump testing
  test:
    name: Pre-bump Testing
    runs-on: ubuntu-latest
    needs: prepare
    if: inputs.skip_tests != true
    timeout-minutes: 15

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Run Pre-bump Tests
        uses: ./.github/actions/test-suite
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          verbose: true

      - name: Test Summary
        run: |
          echo "## 🧪 Pre-bump Test Results" >> $GITHUB_STEP_SUMMARY
          echo "✅ All tests passed - ready for version bump" >> $GITHUB_STEP_SUMMARY

  # Execute version bump
  bump:
    name: Execute Version Bump
    runs-on: ubuntu-latest
    needs: [prepare, test]
    if: always() && needs.prepare.result == 'success' && (needs.test.result == 'success' || needs.test.result == 'skipped')
    timeout-minutes: 10
    outputs:
      commit_sha: ${{ steps.commit_changes.outputs.commit_sha }}
      changelog_content: ${{ steps.generate_changelog.outputs.changelog_content }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git Environment
        uses: ./.github/actions/configure-git
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Ruby Environment
        uses: ./.github/actions/setup-ruby
        with:
          ruby-version: ${{ env.RUBY_VERSION }}
          install-system-deps: true

      - name: Create Version Bump Branch
        if: needs.prepare.outputs.should_create_pr == 'true'
        run: |
          git checkout -b "${{ needs.prepare.outputs.branch_name }}"

      - name: Execute Version Bump
        run: |
          echo "## 🚀 Executing Version Bump" >> $GITHUB_STEP_SUMMARY
          chmod +x ./scripts/version.sh
          ./scripts/version.sh ${{ inputs.version_type }}
          
          echo "✅ **Completed:** Version bump to ${{ needs.prepare.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY

      - name: Generate Changelog Summary
        id: generate_changelog
        run: |
          # Extract the new changelog content for the summary
          if [[ -f "CHANGELOG.md" ]]; then
            # Get the first entry (latest version)
            CHANGELOG_CONTENT=$(sed -n "/^## \[${{ needs.prepare.outputs.new_version }}\]/,/^## \[/p" CHANGELOG.md | head -n -1)
            
            # Save to file for PR body
            echo "$CHANGELOG_CONTENT" > /tmp/changelog_excerpt.md
            
            # Set output (escape for GitHub Actions)
            {
              echo "changelog_content<<EOF"
              echo "$CHANGELOG_CONTENT"
              echo "EOF"
            } >> $GITHUB_OUTPUT
          fi

      - name: Commit Changes
        id: commit_changes
        run: |
          # Commit all changes (version.rb, package.json, CHANGELOG.md)
          git add -A
          git commit -m "chore: bump version to ${{ needs.prepare.outputs.new_version }}

          Version bump: ${{ inputs.version_type }}
          Previous: ${{ needs.prepare.outputs.current_version }}
          New: ${{ needs.prepare.outputs.new_version }}
          
          - Updated version files
          - Generated changelog from git history
          - Automated by GitHub Actions"
          
          COMMIT_SHA=$(git rev-parse HEAD)
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      - name: Push Changes
        run: |
          if [[ "${{ needs.prepare.outputs.should_create_pr }}" == "true" ]]; then
            # Push branch for PR
            git push origin "${{ needs.prepare.outputs.branch_name }}"
            echo "✅ **Pushed:** Branch ${{ needs.prepare.outputs.branch_name }}" >> $GITHUB_STEP_SUMMARY
          else
            # Push directly to main and create tag
            git push origin main
            git tag "v${{ needs.prepare.outputs.new_version }}"
            git push origin --tags
            echo "✅ **Pushed:** Direct to main with tag v${{ needs.prepare.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          fi

  # Create pull request if requested
  create_pr:
    name: Create Pull Request
    runs-on: ubuntu-latest
    needs: [prepare, bump]
    if: needs.prepare.outputs.should_create_pr == 'true'
    timeout-minutes: 5

    steps:
      - name: Create Pull Request
        uses: actions/github-script@v7
        with:
          script: |
            const newVersion = '${{ needs.prepare.outputs.new_version }}';
            const versionType = '${{ inputs.version_type }}';
            const branchName = '${{ needs.prepare.outputs.branch_name }}';
            
            const title = `chore: bump version to v${newVersion}`;
            const body = `## Version Bump: ${versionType}

            This PR bumps the version from ${{ needs.prepare.outputs.current_version }} to ${newVersion}.

            ### Changes Made
            - Updated \`lib/jekyll-theme-zer0/version.rb\`
            - Updated \`package.json\`
            - Generated changelog entries from git history

            ### Changelog
            ${{ needs.bump.outputs.changelog_content }}

            ### Next Steps
            After merging this PR:
            1. The tag \`v${newVersion}\` will be created automatically
            2. Gem release workflow will trigger
            3. GitHub release will be created

            ---
            *This PR was automatically generated by the Version Bump workflow*`;

            const pr = await github.rest.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: title,
              head: branchName,
              base: 'main',
              body: body,
              draft: false
            });

            console.log(`Created PR #${pr.data.number}`);
            
            // Add labels
            await github.rest.issues.addLabels({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.data.number,
              labels: ['version-bump', 'automated']
            });

            return pr.data.number;

  # Create tag and trigger release (for direct commits)
  release:
    name: Create Tag and Trigger Release
    runs-on: ubuntu-latest
    needs: [prepare, bump]
    if: needs.prepare.outputs.should_create_pr == 'false'
    timeout-minutes: 5

    steps:
      - name: Trigger Release Summary
        run: |
          echo "## 🎉 Version Bump Complete" >> $GITHUB_STEP_SUMMARY
          echo "- **Version:** ${{ needs.prepare.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Tag:** v${{ needs.prepare.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🔄 Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "The tag push will automatically trigger:" >> $GITHUB_STEP_SUMMARY
          echo "1. **Gem Release** workflow → Publish to RubyGems" >> $GITHUB_STEP_SUMMARY
          echo "2. **GitHub Release** workflow → Create GitHub release" >> $GITHUB_STEP_SUMMARY

  # Final summary
  summary:
    name: Version Bump Summary
    runs-on: ubuntu-latest
    needs: [prepare, test, bump, create_pr, release]
    if: always()
    timeout-minutes: 5

    steps:
      - name: Generate Summary
        run: |
          echo "## 📊 Version Bump Workflow Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Version Type:** ${{ inputs.version_type }}" >> $GITHUB_STEP_SUMMARY
          echo "**Target Version:** ${{ needs.prepare.outputs.new_version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Strategy:** ${{ needs.prepare.outputs.should_create_pr == 'true' && 'Pull Request' || 'Direct Commit' }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "| Component | Status | Notes |" >> $GITHUB_STEP_SUMMARY
          echo "|-----------|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| 📋 Preparation | ${{ needs.prepare.result }} | Version planning & validation |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 Testing | ${{ needs.test.result }} | Pre-bump test suite |" >> $GITHUB_STEP_SUMMARY
          echo "| 🚀 Version Bump | ${{ needs.bump.result }} | File updates & changelog |" >> $GITHUB_STEP_SUMMARY
          echo "| 📝 Pull Request | ${{ needs.create_pr.result || 'skipped' }} | Review process |" >> $GITHUB_STEP_SUMMARY
          echo "| 🏷️ Release | ${{ needs.release.result || 'skipped' }} | Tag creation |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # Determine overall status
          if [[ "${{ needs.prepare.result }}" == "success" && "${{ needs.bump.result }}" == "success" ]]; then
            if [[ "${{ needs.prepare.outputs.should_create_pr }}" == "true" ]]; then
              if [[ "${{ needs.create_pr.result }}" == "success" ]]; then
                echo "## ✅ **Version Bump: SUCCESS**" >> $GITHUB_STEP_SUMMARY
                echo "Pull request created successfully for review and merge." >> $GITHUB_STEP_SUMMARY
              else
                echo "## ❌ **Version Bump: FAILED**" >> $GITHUB_STEP_SUMMARY
                echo "Version bumped but PR creation failed." >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
            else
              if [[ "${{ needs.release.result }}" == "success" ]]; then
                echo "## ✅ **Version Bump: SUCCESS**" >> $GITHUB_STEP_SUMMARY
                echo "Version bumped and release process initiated." >> $GITHUB_STEP_SUMMARY
              else
                echo "## ❌ **Version Bump: FAILED**" >> $GITHUB_STEP_SUMMARY
                echo "Version bumped but release process failed." >> $GITHUB_STEP_SUMMARY
                exit 1
              fi
            fi
          else
            echo "## ❌ **Version Bump: FAILED**" >> $GITHUB_STEP_SUMMARY
            echo "Version bump process failed during preparation or execution." >> $GITHUB_STEP_SUMMARY
            exit 1
          fi
