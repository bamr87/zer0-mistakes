name: Test Notifications & Alerts

on:
  workflow_run:
    workflows: ["Advanced Testing Framework", "CI", "Enhanced CI/CD Testing Framework"]
    types:
      - completed

jobs:
  notify-results:
    name: Notify Test Results
    runs-on: ubuntu-latest
    if: always()
    permissions:
      contents: write        # Required to read/write repository content and README
      issues: write         # Required to create and comment on issues
      actions: read         # Required to read workflow run artifacts
      pull-requests: read   # Required to read PR information (if needed)
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download workflow artifacts
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: ${{ github.event.workflow_run.id }}
            });
            
            console.log(`Found ${artifacts.data.artifacts.length} artifacts`);
            
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.includes('test-results') || artifact.name.includes('consolidated')) {
                const download = await github.rest.actions.downloadArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                  archive_format: 'zip'
                });
                
                require('fs').writeFileSync(`${artifact.name}.zip`, Buffer.from(download.data));
                console.log(`Downloaded ${artifact.name}.zip`);
              }
            }

      - name: Process test results
        run: |
          # Unzip and process downloaded artifacts
          for zip_file in *.zip; do
            if [[ -f "$zip_file" ]]; then
              echo "Processing $zip_file..."
              unzip -q "$zip_file" -d "$(basename "$zip_file" .zip)"
            fi
          done
          
          # Create summary
          mkdir -p notifications
          
          cat > notifications/summary.md << 'EOF'
          # 🧪 Test Results Summary
          
          **Workflow**: ${{ github.event.workflow_run.name }}
          **Status**: ${{ github.event.workflow_run.conclusion }}
          **Branch**: ${{ github.event.workflow_run.head_branch }}
          **Commit**: ${{ github.event.workflow_run.head_sha }}
          **Run ID**: ${{ github.event.workflow_run.id }}
          
          ## Results Overview
          
          EOF
          
          # Process JSON results if available
          if find . -name "*.json" -path "*/test-results*" | head -1 | read -r json_file; then
            echo "Found test results: $json_file"
            
            # Extract key metrics
            if command -v jq &> /dev/null && [[ -f "$json_file" ]]; then
              echo "### Test Metrics" >> notifications/summary.md
              echo "" >> notifications/summary.md
              
              # Try to extract metrics from JSON
              if jq -e '.test_categories' "$json_file" &> /dev/null; then
                jq -r '.test_categories[] | "- **\(.name)**: \(.passed_tests // 0)/\(.total_tests // 0) tests passed"' "$json_file" >> notifications/summary.md
              fi
              
              echo "" >> notifications/summary.md
            fi
          fi
          
          # Add workflow link
          echo "📊 [View full details](https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }})" >> notifications/summary.md

      - name: Create Issue on Failure
        if: github.event.workflow_run.conclusion == 'failure'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              let body = '## 🚨 Test Failure Alert\n\n';
              body += `**Workflow**: ${{ github.event.workflow_run.name }}\n`;
              body += `**Branch**: ${{ github.event.workflow_run.head_branch }}\n`;
              body += `**Commit**: ${{ github.event.workflow_run.head_sha }}\n`;
              body += `**Run ID**: ${{ github.event.workflow_run.id }}\n\n`;
              
              body += '### Failure Details\n\n';
              body += 'The automated test suite has detected failures. Please review the logs and take appropriate action.\n\n';
              
              // Try to read summary if available
              try {
                if (fs.existsSync('notifications/summary.md')) {
                  const summary = fs.readFileSync('notifications/summary.md', 'utf8');
                  body += summary;
                }
              } catch (error) {
                console.log('Could not read summary:', error.message);
              }
              
              body += '\n\n### Actions Required\n\n';
              body += '- [ ] Review test failures\n';
              body += '- [ ] Fix identified issues\n';
              body += '- [ ] Re-run tests\n';
              body += '- [ ] Close this issue when resolved\n\n';
              
              body += `🔗 [View Workflow Run](https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }})`;
              
              // Check if similar issue already exists
              const existingIssues = await github.rest.issues.listForRepo({
                owner: context.repo.owner,
                repo: context.repo.repo,
                labels: 'test-failure,automated',
                state: 'open'
              });
              
              const recentFailures = existingIssues.data.filter(issue => 
                issue.title.includes('Test Failure') && 
                (Date.now() - new Date(issue.created_at).getTime()) < 24 * 60 * 60 * 1000 // 24 hours
              );
              
              if (recentFailures.length === 0) {
                // Create new issue
                const issue = await github.rest.issues.create({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  title: `🚨 Test Failure Alert - ${{ github.event.workflow_run.head_branch }} (${context.payload.workflow_run.head_sha.substring(0, 7)})`,
                  body: body,
                  labels: ['test-failure', 'automated', 'needs-investigation']
                });
                
                console.log(`Created issue #${issue.data.number}`);
              } else {
                // Comment on existing issue
                const latestIssue = recentFailures[0];
                await github.rest.issues.createComment({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: latestIssue.number,
                  body: `## Additional Failure\n\n${body}`
                });
                
                console.log(`Updated existing issue #${latestIssue.number}`);
              }
            } catch (error) {
              console.error('Failed to create or update issue:', error.message);
              console.error('Error details:', error);
              // Don't fail the entire workflow if issue creation fails
              core.warning('Could not create/update issue due to permissions or other error');
            }
              const latestIssue = recentFailures[0];
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: latestIssue.number,
                body: `## Additional Failure\n\n${body}`
              });
              
              console.log(`Updated existing issue #${latestIssue.number}`);
            }

      - name: Update README Badge
        if: github.event.workflow_run.head_branch == 'main'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            try {
              // Read current README
              const readme = fs.readFileSync('README.md', 'utf8');
              
              // Determine badge color based on test results
              const status = '${{ github.event.workflow_run.conclusion }}';
              const color = status === 'success' ? 'brightgreen' : 
                           status === 'failure' ? 'red' : 'yellow';
              const statusText = status === 'success' ? 'passing' : 
                                status === 'failure' ? 'failing' : 'unknown';
              
              // Create/update test status badge
              const badgeUrl = `https://img.shields.io/badge/tests-${statusText}-${color}`;
              const badgeMarkdown = `![Test Status](${badgeUrl})`;
              
              let updatedReadme = readme;
              
              // Look for existing test badge and replace it
              const testBadgeRegex = /!\[Test Status\]\(https:\/\/img\.shields\.io\/badge\/tests-[^)]+\)/g;
              
              if (testBadgeRegex.test(readme)) {
                updatedReadme = readme.replace(testBadgeRegex, badgeMarkdown);
              } else {
                // Add badge after the first existing badge or at the top
                const firstBadgeMatch = readme.match(/!\[[^\]]*\]\([^)]+\)/);
                if (firstBadgeMatch) {
                  const insertIndex = readme.indexOf(firstBadgeMatch[0]) + firstBadgeMatch[0].length;
                  updatedReadme = readme.slice(0, insertIndex) + '\n\n' + badgeMarkdown + readme.slice(insertIndex);
                } else {
                  // Insert at the beginning
                  updatedReadme = badgeMarkdown + '\n\n' + readme;
                }
              }
              
              // Write updated README if it changed
              if (updatedReadme !== readme) {
                fs.writeFileSync('README.md', updatedReadme);
                
                // Get current README SHA
                const currentReadme = await github.rest.repos.getContent({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: 'README.md'
                });
                
                // Commit the change
                await github.rest.repos.createOrUpdateFileContents({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  path: 'README.md',
                  message: `Update test status badge: ${statusText}`,
                  content: Buffer.from(updatedReadme).toString('base64'),
                  sha: currentReadme.data.sha,
                  branch: 'main'
                });
                
                console.log('Updated README with test status badge');
              }
            } catch (error) {
              console.error('Could not update README:', error.message);
              console.error('Error details:', error);
              core.warning('Failed to update README badge');
            }

      - name: Send Slack Notification (if configured)
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
        run: |
          if [[ -n "$SLACK_WEBHOOK_URL" ]]; then
            # Determine emoji based on status
            case "${{ github.event.workflow_run.conclusion }}" in
              success) emoji="✅"; color="good" ;;
              failure) emoji="❌"; color="danger" ;;
              cancelled) emoji="⚠️"; color="warning" ;;
              *) emoji="❓"; color="warning" ;;
            esac
            
            # Create Slack message
            cat > slack-message.json << EOF
            {
              "attachments": [
                {
                  "color": "$color",
                  "title": "$emoji Test Results - ${{ github.event.workflow_run.name }}",
                  "fields": [
                    {
                      "title": "Status",
                      "value": "${{ github.event.workflow_run.conclusion }}",
                      "short": true
                    },
                    {
                      "title": "Branch",
                      "value": "${{ github.event.workflow_run.head_branch }}",
                      "short": true
                    },
                    {
                      "title": "Commit",
                      "value": "${{ github.event.workflow_run.head_sha }}",
                      "short": true
                    }
                  ],
                  "actions": [
                    {
                      "type": "button",
                      "text": "View Details",
                      "url": "https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }}"
                    }
                  ]
                }
              ]
            }
            EOF
            
            # Send to Slack
            curl -X POST -H 'Content-type: application/json' \
                 --data @slack-message.json \
                 "$SLACK_WEBHOOK_URL"
          else
            echo "Slack webhook not configured, skipping notification"
          fi

      - name: Generate Test Report Summary
        run: |
          echo "## 📊 Test Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Workflow**: ${{ github.event.workflow_run.name }}" >> $GITHUB_STEP_SUMMARY
          echo "**Status**: ${{ github.event.workflow_run.conclusion }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch**: ${{ github.event.workflow_run.head_branch }}" >> $GITHUB_STEP_SUMMARY
          echo "**Commit**: ${{ github.event.workflow_run.head_sha }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "🔗 [View Full Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.event.workflow_run.id }})" >> $GITHUB_STEP_SUMMARY
